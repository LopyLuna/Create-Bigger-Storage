plugins {
    id "fabric-loom" version "1.8.+"
    id "io.github.p03w.machete" version "1.+" // automatic jar compressing on build
    id "maven-publish"
}

repositories {
    maven { url = "https://maven.parchmentmc.org" } // Parchment mappings

    maven { url = "https://mvn.devos.one/releases" } // Porting Lib releases
    maven { url = "https://mvn.devos.one/snapshots" } // Create and several dependencies
    maven { url = "https://jitpack.io/" } // Mixin Extras, Fabric ASM
    maven { url = "https://maven.tterrag.com/" } // Flywheel
    maven { url = "https://maven.jamieswhiteshirt.com/libs-release" } // Reach Entity Attributes
    maven { url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven" } // Forge Config API Port

    maven { // Fabric ASM for Porting Lib
        url = "https://jitpack.io/"
        content { includeGroupAndSubgroups("com.github") }
    }

    maven { url = "https://maven.shedaniel.me" } // Cloth Config, REI
    maven { url = "https://maven.blamejared.com" } // JEI

    maven { url = "https://maven.terraformersmc.com/releases" } // Mod Menu, EMI
}

sourceCompatibility = JavaVersion.VERSION_17

group = 'uwu.lopyluna.create_bs'
base.archivesName = "Create-Better-Storages-${minecraft_version}"
version = mod_version

configurations.configureEach {
    resolutionStrategy {
        force("net.fabricmc:fabric-loader:$fabric_loader_version")
    }
}
//java.toolchain.languageVersion = JavaLanguageVersion.of(17)

//println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

dependencies {
    minecraft("com.mojang:minecraft:$minecraft_version")
    mappings(loom.layered {
        it.officialMojangMappings { nameSyntheticMembers = false }
        it.parchment("org.parchmentmc.data:parchment-$minecraft_version:$parchment_version@zip")
    })
    modImplementation("net.fabricmc:fabric-loader:$fabric_loader_version")

    modImplementation("net.fabricmc.fabric-api:fabric-api:$fabric_api_version")
    modImplementation("com.simibubi.create:create-fabric-$minecraft_version:$create_version")
    modLocalRuntime("com.terraformersmc:modmenu:$modmenu_version")

    switch (recipe_viewer.toLowerCase(Locale.ROOT)) {
        case "jei": modLocalRuntime("mezz.jei:jei-$minecraft_version-fabric:$jei_version"); break
        case "rei": modLocalRuntime("me.shedaniel:RoughlyEnoughItems-fabric:$rei_version"); break
        case "emi": modLocalRuntime("dev.emi:emi-fabric:$emi_version"); break
        case "disabled": break
        default: println("Unknown recipe viewer specified: $recipe_viewer. Must be JEI, REI, EMI, or disabled.")
    }
    modCompileOnly("mezz.jei:jei-$minecraft_version-fabric:$jei_version")
    modCompileOnly("mezz.jei:jei-$minecraft_version-common:$jei_version")
}

processResources {
    // require dependencies to be the version compiled against or newer
    Map<String, Object> properties = [
            "version": version,
            "fabric_loader_version": fabric_loader_version,
            "fabric_api_version": fabric_api_version,
            "create_version": create_version,
            "minecraft_version": minecraft_version
    ]

    inputs.properties(properties)

    filesMatching("fabric.mod.json") {
        expand properties
    }
}

sourceSets {
    main {
        resources {
            srcDir("src/generated/resources")
            exclude("src/generated/resources/.cache")
        }
    }
}

loom {
    runs {
        datagen {
            client()

            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/generated/resources")}"
            vmArg "-Dfabric-api.datagen.modid=create_bs"
            vmArg "-Dporting_lib.datagen.existing_resources=${file("src/main/resources")}"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = Integer.parseInt(sourceCompatibility)
}

java {
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.base.archivesName}" }
    }
}
